[{"content":"Gentoo Wiki 如果想了解具体某些package的使用，可以搜索 \u0026ldquo;gentoo wiki keyword\u0026rdquo;，例如 gentoo wiki steam：\n gentoo-wiki-steam \nPortage 官方wiki 配置文件\nPortage utils Portage还有很多辅助小工具，包括： Portage utils\nReport Bugs emerge 出错 查看错误是哪个stage\n在gentoo-zh报bug issues\n在gentoo报bug  注册账户 bugs 检查是否已经有重复的bug：  todo：截图 cc to me   正确的bug的标题：  title: format  categoriy/package: first-error categoriy/package[use]: first-error     ebuild.log的权限问题 emerge \u0026ndash;info  熟悉ebuild打包  建立自己的overlay用来实验: https://wiki.gentoo.org/wiki/Custom_EBuild_repository ebuild命令学习  user account EBuild xxx.EBuild help EBuild xxx.EBuild clean install   PORTAGE_TMPDIR目录介绍  build-info distdir homedir image temp work   environment file stage介绍  EBuild Write devmanual  练习: https://devmanual.gentoo.org/quickstart/index.html 概念: https://devmanual.gentoo.org/general-concepts/index.html 编写：https://devmanual.gentoo.org/ebuild-writing/index.html  使用repoman  repoman manifest repoman -dx full repoman -dx commit (or git)  ","date":"2021-07-03T16:21:08+08:00","permalink":"https://liangyongxiang.github.io/p/%E6%88%91%E7%9A%84gentoo%E6%80%BB%E7%BB%93/","title":"我的Gentoo总结"},{"content":"TINYWM 我现在用的wm是dwm, 它是linux的一个极简的窗口管理器。基于C语言，大概只有2000行的代码。 不过它还不是最简单的窗口管理器。最简单的窗口管理器是tinywm: http://incise.org/tinywm.html。源码如下，我稍微整理一下格式：\n/* TinyWM is written by Nick Welch \u0026lt;mack@incise.org\u0026gt;, 2005. * * This software is in the public domain * and is provided AS IS, with NO WARRANTY. */ #include \u0026lt;X11/Xlib.h\u0026gt; #define MAX(a, b) ((a) \u0026gt; (b) ? (a) : (b))  int main() { Display * dpy; Window root; XWindowAttributes attr; XButtonEvent start; XEvent ev; if(!(dpy = XOpenDisplay(0x0))) return 1; root = DefaultRootWindow(dpy); XGrabKey(dpy, XKeysymToKeycode(dpy, XStringToKeysym(\u0026#34;F1\u0026#34;)), Mod1Mask, root, True, GrabModeAsync, GrabModeAsync); XGrabButton(dpy, 1, Mod1Mask, root, True, ButtonPressMask, GrabModeAsync, GrabModeAsync, None, None); XGrabButton(dpy, 3, Mod1Mask, root, True, ButtonPressMask, GrabModeAsync, GrabModeAsync, None, None); for(;;) { XNextEvent(dpy, \u0026amp;ev); if(ev.type == KeyPress \u0026amp;\u0026amp; ev.xkey.subwindow != None) XRaiseWindow(dpy, ev.xkey.subwindow); else if(ev.type == ButtonPress \u0026amp;\u0026amp; ev.xbutton.subwindow != None) { XGrabPointer(dpy, ev.xbutton.subwindow, True, PointerMotionMask|ButtonReleaseMask, GrabModeAsync, GrabModeAsync, None, None, CurrentTime); XGetWindowAttributes(dpy, ev.xbutton.subwindow, \u0026amp;attr); start = ev.xbutton; } else if(ev.type == MotionNotify) { int xdiff, ydiff; while(XCheckTypedEvent(dpy, MotionNotify, \u0026amp;ev)); xdiff = ev.xbutton.x_root - start.x_root; ydiff = ev.xbutton.y_root - start.y_root; XMoveResizeWindow(dpy, ev.xmotion.window, attr.x + (start.button==1 ? xdiff : 0), attr.y + (start.button==1 ? ydiff : 0), MAX(1, attr.width + (start.button==3 ? xdiff : 0)), MAX(1, attr.height + (start.button==3 ? ydiff : 0))); } else if(ev.type == ButtonRelease) XUngrabPointer(dpy, CurrentTime); } } Display是Xorg的概念，在archlinux wiki上找到一个简短的解释(https://wiki.archlinux.org/index.php/Multihead):\n  Monitor refers to a physical display device, such as an LCD panel. Screen refers to an X-Window screen (that is: a monitor attached to a display). Display refers to a collection of screens that are in use at the same time showing parts of a single desktop (you can drag windows among all screens in a single display).   TODO\n","date":"2021-01-01T01:39:10+08:00","permalink":"https://liangyongxiang.github.io/p/wm%E5%AD%A6%E4%B9%A0/","title":"WM学习"}]